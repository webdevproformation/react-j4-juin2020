lancer un terminal  dans le dossier react
create-react-app jour4
cd jour4
npm i bootstrap
npm start

---------------

le projet jour4 va être le projet final
dans lequel nous allons utiliser le maximum de techniques

- toutes les techniques vues
- Routing (menu)
- API
- Formulaire
- Déploiement


déployer => le mettre en ligne sur un hébergeur (Heroku donne un espace gratuit)


Barre de menu => Navbar
    logo => (utiliser une image stockée dans le dossier public)
    lien vers la page home
    lien vers la page articles
bootstrap pour la mise en forme 

=> install react-router-dom 
=> liaison entre la barre de lien / ce que l'on voit 
// ajax pour mettre à jour l'écran (Angular => Routing => tableau url => composant)

--------------

une fois la barre de menu prête et afficher dans App.js, ajouter un nouveau module dans le projet jour4 => react-router-dom 

1 stopper le serveur via un Ctrl + C

2 npm i react-router-dom

relancer votre serveur de dév

3 npm start

--------------

Créer deux composants => 
src/front/Home.jsx  => <h1>Bienvenue sur l'accueil</h1>
src/front/Articles.jsx => <h1>liste des articles</h1>

ce sont ces deux composants qui vont être en charge d'afficher la partie centrale de la page !

-------------

react-router-dom installe plusieurs composants 
node_modules (npm i react-router-dom)

<BrowserRouter> => src/index.js
// écouter ce qui est saisi dans la barre d'adresse 
// de votre navigateur

<Route> => src/App.js 
// Angular liaison entre url qui est saisit 
// le composant à afficher 
// routage => Angular 
Ainsi que les composants à afficher 

uniquement sur le lien qui amène vers la page d'accueil  => exact

attention vous devez écrire les routes de la plus stric vers la plus générale

convention / => l'url de la page d'accueil 

<Link> => Navbar.jsx

Lorsque vous cliquez sur un lien dans la barre de menu 
page => rafraichi intégralement
blanche => recherche

afin d'éviter d'avoir le rechargement de page 
intégrale 
 remplacer la balise <a href=""></a>
 <Link to=""></Link>

SPA => Single Page Application 

on a l'impression que l'on change de page
une fois que votre Application est chargée 
dans le nagateur => il n'y a plus d'appel au serveur

une grosse partie de l'application est géré directement dans RAM du navigateur

=> Application très rapide en terme de chargement


Cas pratique

1 Créer un nouveau composant Contact.jsx 
l'enregistrer dans le dossier src/front 

dans le render du composant Contact => <h1>Nous contacter</h1> 

2 Ajouter dans App.js  une nouvelle route 

/contact => Contact.jsx  

3 dans la barre de menu (NavBar)
Ajouter un nouveau Link cliquer sur le texte Contact => le composant Contact

-------------------

Créer un composant Post
src/front 

dans le render
<div>
    <h1>article numéro</h1>
    <p>lorem ipsum</p>
<div>

dans le fichier App.js créer nouvelle route => pattern
dans la barre d'adresse 
=> route articles/:id => Post
Avant  <Route path="/articles" component={Articles} />

-------------------

Question ??


=> quelque soit la technologie ? 
=> barre de menu 


fin de matinée 
=> Hicham 

=> dans le composant Post 

 this.props.history.push("/articles"); => aller vers la page listes articles 

this.props.match.params.id ; (dans le render) => récupérer l'information qui est saisie dans l'url

=> $_GET["id]
=> $_GET["titre"] ?? en PHP

=> ces propriétés :  history / match (donnée par le react-router-dom)
=> donnée via le Composant Route 
=> site officiel qui donne toutes les informations sur le composant
https://reacttraining.com/react-router/

// -------------

// en 2011 => grosse communauté
// principaux concepts pour créer des blocs visuels 
// plus léger que Angular => plus facile à prendre en main 
// https://javascript.developpez.com/actu/289055/Etat-de-JavaScript-en-2019-les-developpeurs-aiment-un-peu-plus-React-Angular-est-en-declin-un-groupe-de-developpeurs-pense-que-JS-est-trop-complexe/

// en 2019 => Développeur Front quell techno il préfère utiliser => React 

// react => ReactJS => site internet exemple https://developer.mozilla.org/en-US/

react + react dom  => html <h1>
            jsx 

create-react-app projet
cd projet
npm start 

// React native => Application MObile compatible iphone / Android 
                    <Text></Text>

react + react native  => Java // Swift 

3/ 4 lib à installer
installer => téléphone verictuel
npm start 

// logiciel pour les ordinateurs

React Desktop 

---------------------------------------

je tape dans ma barre d'adresse n'importe quoi 

localhost:3000/blabla => 404 page demandée n'existe pas  

créer un nouveau src/front/notFound.jsx


---------------------------------------

<NavLink> => ressemble beaucoup au composant Link 

si la page encours match avec l'url donnée dans composant => ajouter une class spéciale

Navbar.jsx


---------------------------------------

Dans le composant Home.jsx 
remplir le state du composant  :

state = {
    contenu : [
        {id : 1 , titre : "article 1" , content:"lorem ipsum" , url:"https://via.placeholder.com/400x200"},
        {id : 2 , titre : "article 2" , content:"lorem ipsum" , url:"https://via.placeholder.com/400x200"},
        {id : 3 , titre : "article 3" , content:"lorem ipsum" , url:"https://via.placeholder.com/400x200"},
        {id : 4 , titre : "article 4" , content:"lorem ipsum" , url:"https://via.placeholder.com/400x200"},
    ]
}
=> dans le render 
=> dans la vue du composant après le titre faire une boucle .map()

pour afficher chaque item this.state.contenu 

<article>
    <h2>titre</h2>
    <img src="url" alt="">
    <p>contenu</p>
    <p><Link to="/articles/id">lire la suite </Link></p>
</article>

=> service => API 



------------------------

remplir le composant Articles.jsx

utiliser le service ArticlesFictifs => 

afficher 5 articles dans ce composant 


------------------------

Paul

image en background => 

https://source.unsplash.com/random/1200x400


"background-size": "cover"

---------------

remplacer lorem ipsum dans une partie du site + réduire le nombre de mots

---------------

Souleymane 

diaporama == carousel ( bootstrap )

Menu burger sur la nav bar 

<img />

---------------

Formulaire 

=> bootstrap soit joli 

https://getbootstrap.com/docs/4.5/components/forms/

form 
    div => className form-group 
        label => email 
        input / textarea / select => className form-control 


=> je veux ajouter dans la composant React Contact 

un formulaire 
    3 champs =>
        email 
        commmentaire 
        button envoyer 


// https://github.com/webdevproformation/react-j4-juin2020 

// dernière partie du formulaire 

// changer les valeurs dans le state => 
// traiter les informations =>
// vérifier que les champs sont remplis 
// mettre un message de remerciement // message d'information pour dire ce qu'il manque
// composant alert 

// vider les champs du formulaire 
// Appeler une API => en charge d'enregistrer les informations dans une base de données MongoDB
// axios => npm i axios (appeler une API)
// service online demande => message  

------------------------------

Cas pratique 

// dans le composant Post 
// ajouter avant le bouton retour à la liste des articles

formulaire 2 seul champ textearea
            et un bouton submit
utiliser bootstrap pour le styliser 

vérifier que le textarea est rempli 
si le texte est rempli alors alert(merci pour votre message !);

sinon alert(veuillez compléter le champ commentaire);


bien align
parent => d-flex )=> display flex
gauche                            droite 

=> documentation bootstrap => Utilities > Display 

=> documentation bootstrap => Utilities > spacing
ml-auto

margin-left : auto 


-------------------------

Créer un nouveau composant dans src/front Blog 

ce composant sera accessible via l'adresse suivante 
http://localhost:3000/blog => Ajouter la route dans App.js

veuillez l'ajouter dans la barre de menu un lien Blog (modifié le composant Navbar)

ce composant va juste afficher le texte suivant <h1>Blog</h1> render du composant Blog 
