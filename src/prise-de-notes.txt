lancer un terminal  dans le dossier react
create-react-app jour4
cd jour4
npm i bootstrap
npm start

---------------

le projet jour4 va être le projet final
dans lequel nous allons utiliser le maximum de techniques

- toutes les techniques vues
- Routing (menu)
- API
- Formulaire
- Déploiement


déployer => le mettre en ligne sur un hébergeur (Heroku donne un espace gratuit)


Barre de menu => Navbar
    logo => (utiliser une image stockée dans le dossier public)
    lien vers la page home
    lien vers la page articles
bootstrap pour la mise en forme 

=> install react-router-dom 
=> liaison entre la barre de lien / ce que l'on voit 
// ajax pour mettre à jour l'écran (Angular => Routing => tableau url => composant)

--------------

une fois la barre de menu prête et afficher dans App.js, ajouter un nouveau module dans le projet jour4 => react-router-dom 

1 stopper le serveur via un Ctrl + C

2 npm i react-router-dom

relancer votre serveur de dév

3 npm start

--------------

Créer deux composants => 
src/front/Home.jsx  => <h1>Bienvenue sur l'accueil</h1>
src/front/Articles.jsx => <h1>liste des articles</h1>

ce sont ces deux composants qui vont être en charge d'afficher la partie centrale de la page !

-------------

react-router-dom installe plusieurs composants 
node_modules (npm i react-router-dom)

<BrowserRouter> => src/index.js
// écouter ce qui est saisi dans la barre d'adresse 
// de votre navigateur

<Route> => src/App.js 
// Angular liaison entre url qui est saisit 
// le composant à afficher 
// routage => Angular 
Ainsi que les composants à afficher 

uniquement sur le lien qui amène vers la page d'accueil  => exact

attention vous devez écrire les routes de la plus stric vers la plus générale

convention / => l'url de la page d'accueil 

<Link> => Navbar.jsx

Lorsque vous cliquez sur un lien dans la barre de menu 
page => rafraichi intégralement
blanche => recherche

afin d'éviter d'avoir le rechargement de page 
intégrale 
 remplacer la balise <a href=""></a>
 <Link to=""></Link>

SPA => Single Page Application 

on a l'impression que l'on change de page
une fois que votre Application est chargée 
dans le nagateur => il n'y a plus d'appel au serveur

une grosse partie de 'lapplication est géré directement dans RAM du navigateur

=> Application très rapide en terme de chargement


Cas pratique

1 Créer un nouveau composant Contact.jsx 
l'enregistrer dans le dossier src/front 

dans le render du composant Contact => <h1>Nous contacter</h1> 

2 Ajouter dans App.js  une nouvelle route 

/contact => Contact.jsx  

3 dans la barre de menu (NavBar)
Ajouter un nouveau Link cliquer sur le texte Contact => le composant Contact
